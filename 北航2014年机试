输入一个正整数，输出时，先输出这个数本身，跟着一个逗号，再输出这个数的各位数字的阶乘和，等号，阶乘和的计算结果，并判断阶乘和是否等于原数，如果相等输出Yes，否则输出No。题目说明输入的正整数以及其各位阶乘和都不会超出int型的表示范围。 
输入样例1： 
145 
输出样例1： 
145,1!+4!+5!=145 
Yes 
输入样例2： 
1400 
输出样例2： 
1400,1!+4!+0!+0!=27 
No

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<string>
#include<algorithm>
#include<map>
using namespace std;
#define inf 99999
int jiecheng(int a){
    if(a==0)return 1;
    else return jiecheng(a-1)*a;
}
int main(){
    int n,t,i,s;
    int a[20];
    scanf("%d",&n);
    t=n,s=0;
    while(t){
        a[s++]=t%10;
        t/=10;
    }
    t=0;
    for(i=0;i<s;i++){
        t+=jiecheng(a[i]);
    }
    printf("%d,",n);
    for(i=s-1;i>0;i--)
        printf("%d!+",a[i]);
    printf("%d!=%d\n",a[0],t);
    if(t==n)printf("Yes\n");
    else printf("No\n");
    return 0;
}

2.输入若干行字符，表示某电影的演职员表，每行只有一个冒号，冒号前面是职位，冒号后面是姓名，要求把各行冒号对齐，删除多余空格后输出。 
先输入一个字，表示排版要求的冒号位置该位置号保证比各行冒号前的最大字符数还要大。再输入若干行字符，最多50行，每行最多100个字符，除空格、制表符和回车之外都是有效字符，要求每行的冒号处于格式要求的位置，冒号两边与有效单词之间各有一个空格，冒号前面的单词之间只有一个空格（删除多余的空格和制表符），在冒号左边右对齐，前面全由空格填充，冒号后面的单词之间也只有一个空格，在冒号右边左对齐，最后一个单词后不加空格直接换行。

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<string>
#include<algorithm>
#include<map>
using namespace std;
#define inf 99999
 
#define M 50
#define N 100
 
int main()
{//scanf输入后回车符进入缓冲区，用getchar()缓冲掉
    int po;
    scanf("%d",&po);
    getchar();
//定义二维数组来存放输入的语句
    char s[M][N];
//用gets()来输入每行语句，当下一行为空行时，跳出循环
    int p=0;
    while(p<M)
    {
        gets(s[p]);
        p++;
        if(s[p-1][0]=='\0') break;
    }
//除去空白行进行循环遍历
    for(int i=0;i<p-1;i++)
    {
        int mao=0,j=0;
        int len=strlen(s[i]);//算上了'\0'
//每一句定位：所在位置，记录mao
 
        while(j<len)
        {
            if(s[i][j]==':')
            {   mao=j;
                break;
            }
            j++;
        }
//向系统申请两个一维数组的内存，这里注意不要越界，不要越界！！！！！！！
        char *job=NULL;
        job=(char*) malloc((mao+1)*sizeof(char));
        char *name=NULL;
        name=(char*) malloc((len-mao)*sizeof(char));
//在把职位赋值的时候需要在赋值完成之后加上'\0'符号，否则会出现连续的空白符
        char jo[150],na[150];
        for(j=0;j<mao;j++)
        {
            jo[j]=s[i][j];
        }
        jo[j]='\0';
        int t=0;
        for(j=0;j<mao;j++){
            if(jo[j]==' '){
                job[t++]=jo[j];
                while(jo[j]==' ')j++;
                j--;
            }
            else job[t++]=jo[j];
        }
        if(job[t-1]==' ')job[t-1]='\0';
//将姓名赋值给name数组，因为末尾有换行符，可直接到=len
        int k=0;
        for(j=mao+1;j<=len;j++,k++)
        {
            na[k]=s[i][j];
        }
        t=0;
        for(j=0;j<k;j++){
            if(na[j]==' '){
                name[t++]=na[j];
                while(na[j]==' ')j++;
                j--;
            }
            else name[t++]=na[j];
        }
        if(name[t-1]==' ')name[t-1]='\0';
//按照题目格式，在规定位置为冒号，然后前面的职位右对齐，域宽为冒号位置减一，空白格填充，姓名则左对齐，直接换行
//在这里是代替%*s里的*，比如字符串长度6，这里相当于%9s，输出时前面有3个空格
        printf("%*s : %-s\n",po,job,name);
//记得释放掉你申请的内存
        free(job);
        free(name);
 
    }
    return 0;
}

3.题目描述： 
输入一个19*19的矩阵，只包含数字0、1、2，表示两人下五子棋的棋牌状态，1、2分别表示两人的棋子，0表示空格。要求判断当前状态下是否有人获胜（横向、竖向或者斜线方向连成5个同色棋子）。题目说明输入样例保证每条线上至多只有连续5个同色棋子，并且保证至多只有1人获胜。如果有人获胜，输出获胜者（1或2）加一个冒号，接着输出获胜的五连珠的第一个棋子的坐标，从上到下从左到右序号最小的为第一个，序号从1开始编号。如果无人获胜，输出no。

思路是最简单的暴力，从左上角开始，逐个遍历右，左下，右下，下，遍历过的点记上标记，防止某个方向重复搜索。

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<string>
#include<algorithm>
#include<map>
using namespace std;
#define inf 99999
int a[30][30],vis[30][30];
bool flag;
int aimx,aimy;
void dfs(int row,int col,int winner,int dir,int step)
{
    if(row<0||row>=19||col<0||col>=19)return ;
    if(a[row][col]==0)return ;
    if(winner!=a[row][col])return ;
    if(step==4)
    {
        flag=true;
        printf("%d:(%d,%d)\n",winner,aimx,aimy);
        return ;
    }
    //vis[row][col]=1;
    if(dir==0)
    {
        if(vis[row][col+1])return ;
        vis[row][col+1]=1;
            dfs(row,col+1,winner,dir,step+1);
    }
    else if(dir==1)
    {
        if(vis[row+1][col+1])return ;
        vis[row+1][col+1]=1;
            dfs(row+1,col+1,winner,dir,step+1);
    }
    else if(dir==2)
    {
        if(vis[row+1][col])return ;
        vis[row+1][col]=1;
        dfs(row+1,col,winner,dir,step+1);
    }
    else if(dir==3)
    {
        if(vis[row+1][col-1])return ;
        vis[row+1][col-1]=1;
        dfs(row+1,col-1,winner,dir,step+1);
    }
}
int main()
{
    int i,j,k;
    //FILE *fp=fopen("d:\\cin.txt","r");
    for(i=0; i<19; i++)
        for(j=0; j<19; j++)
            scanf("%d",&a[i][j]);
    memset(vis,0,sizeof(vis));
    flag=false;
    for(i=0; i<19; i++)
        for(j=0; j<19; j++)
            if(a[i][j]!=0)
            {
                aimx=i+1,aimy=j+1;
                for(k=0; k<4; k++) //右，右下，下，左下
                {
                    dfs(i,j,a[i][j],k,0);
                }
            }
    if(!flag)printf("no\n");
    return 0;
}
/*
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 1 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
*/
/*
#include<stdio.h>
#define N 19
typedef struct Visit{
    bool right;
    bool down;
    bool rdown;
    bool ldown;
}VISIT;
int flag=0;
void findWin(int a[][N]);
int findWinHelp(int a[][N],int row,int col,int side,int direction,VISIT v[N][N],int num);
int main()
{
    int a[N][N];
    //FILE *fp=fopen("e:\\tsts.txt","r");
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    findWin(a);
    if(flag==0)
        printf("no");
    return 0;
}
void findWin(int a[][N])
{
    if(a==NULL)
      return;
    VISIT v[N][N];
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            if(a[i][j]!=0)
            {
                for(int k=0;k<4;k++)
                {
                v[i][j].right=false;
                v[i][j].down=false;
                v[i][j].rdown=false;
                v[i][j].ldown=false;
                findWinHelp(a,i,j,a[i][j],k,v,0);
                }
            }
        }
    }
    return;
}
int findWinHelp(int a[][N],int row,int col,int side,int direction,VISIT v[N][N],int num)
{
      // 扫描不可以超过范围
       VISIT *visit=&v[row][col];
        if (row < 0 || col < 0||row>=N || col>=N) {
            return -1;
        }
        // if it is 0, just return.
        if (a[row][col] == 0) {
            return -1;
        }
        // 必须是同边的棋子。例如，都是1，或都是2.
        if (side != a[row][col]) {
            return -1;
        }
        // we get the result.
        if (num == 4) {
            flag=1;
           printf("%d:(%d,%d)",side,row,col);
           return 0;
        }
        // 如果未设置标记，新建标记。
        if (visit->down!=true && visit->ldown!=true && visit->rdown!=true && visit->right!=true ) {
                visit->right=false;
                visit->down=false;
                visit->rdown=false;
                visit->ldown=false;
        }
        // 对各个方向进行不同的搜索方向。
        if (direction ==  0) {
            if (visit->right) {
                return -1;
            }
            visit->right = true;
            // right
            return findWinHelp(a, row,col+1, side, direction, v, num + 1);
        } else if (direction == 1) {
            if (visit->down) {
                return -1;
            }
            visit->down = true;
            // down
            return findWinHelp(a,row+1,col, side, direction, v, num + 1);
        } else if (direction == 2) {
            if (visit->rdown) {
                return -1;
            }
            visit->rdown = true;
            // right down
            return findWinHelp(a,row+1,col+1, side, direction, v, num + 1);
        } else if (direction == 3) {
            if (visit->ldown) {
                return -1;
            }
            visit->ldown = true;
            // left down
            return findWinHelp(a,row+1, col-1, side, direction, v, num + 1);
        }
        return -1;
    }
*/
