1.【问题描述】 
孪生数定义： 如果 A 的约数（因数，包含1，但不包含A本身）之和等于 B ， B 的约数（因数）之和等于 A ， A 和 B 称为孪生数（A和B不相等）。试找出正整数 M 和 N 之间的孪生数。 
输入： 
从控制台输入两个正整数M和N

#include<stdio.h>
#include<math.h>
int sumys(int a){
	int sum=0;
    for(int i=1;i<=a/2;i++)
	{
		if(a%i==0)sum+=i;
	}
	return sum;
}
int main()
{
	int i,j,a,b,t,sum[1000],f=0;
	scanf("%d%d",&a,&b);
	if(a>b){t=a;a=b;b=t;}
	for(i=0;i<b-a+1;i++)
	   sum[i]=sumys(i+a);
	for(i=a;i<b;i++)
	{
		for(j=i+1;j<=b;j++){
			if(sum[i-a]==j&&sum[j-a]==i){
				printf("%d %d\n",i,j);f=1;
			}
		}
	}
	if(!f)printf("NONE\n");
    return 0;
}

2.【问题描述】 
先输入两个矩阵A和B，然后输入替换位置（左上角），编写程序将矩阵A中从替换位置开始的子矩阵（与B同样大小）替换为B，并输出替换后的矩阵。 
【输入形式】 
从控制台先输入矩阵A的行数和列数（行数和列数均大于等于1，小于等于20），然后在新的行上输入矩阵A的各行数字（以一个空格分隔的整数）。再以同样的方式输入矩阵B。最后输入替换位置（用一个空格分隔的两个整数表示，行数和列数都从1开始计数，因此两个整数都大于等于1）。若替换位置超出了矩阵A的行数或列数，则原样输出矩阵A。 
【输出形式】 
在标准输出上分行输出替换后的矩阵，每行中各数字之间以一个空格分隔。 
【输入样例1】 
5 6 
10 2 34 -1 800 90 
2 76 56 -200 23 1 
35 0 0 98 8 3000 
2000 100 -1 1 2 0 
8 7 85 963 496 8 
2 3 
9 9 9 
9 9 9 
3 3 
【输出样例1】 
10 2 34 -1 800 90 
2 76 56 -200 23 1 
35 0 9 9 9 3000 
2000 100 9 9 9 0 
8 7 85 963 496 8 
【样例1说明】 
输入的矩阵A为5行6列，矩阵B是2行3列，替换位置为第3行的第3列，即：将A中第3行第3列开始的、行数为2列数为3的子矩阵替换为B。 
【输入样例2】 
3 4 
10 2 34 -1 
2 76 56 -200 
35 0 0 98 
2 3 
9 9 9 
9 9 9 
2 3 
【输出样例2】 
10 2 34 -1 
2 76 9 9 
35 0 9 9 
【样例2说明】 
输入的矩阵A为3行4列，矩阵B是2行3列，替换位置为第2行的第3列，即：将A中第2行第3列开始的、行数为2列数为3的子矩阵替换为B。但该子矩阵超出了A的范围，所以只实现了部分替换。 
【评分标准】 

该题要求输出替换后的矩阵，共有5个测试点，提交程序文件名为example2.c或example2.cpp。

#include<stdio.h>
#include<string.h>
#include<math.h>
int main(){
  int i,j,row,col,r,c,str,stc;
  int a[100][100],b[100][100];
  scanf("%d%d",&row,&col);
  for(i=0;i<row;i++)
     for(j=0;j<col;j++)
         scanf("%d",&a[i][j]);
  scanf("%d%d",&r,&c);
  for(i=0;i<r;i++)
     for(j=0;j<c;j++)
       scanf("%d",&b[i][j]);
  scanf("%d%d",&str,&stc);
  for(i=str-1;i<r+str-1;i++)
	  for(j=stc-1;j<c+stc-1;j++){
		  a[i][j]=b[i-str+1][j-stc+1];
	  }
  for(i=0;i<row;i++)
	  for(j=0;j<col;j++){
		  printf("%d ",a[i][j]);
		  if(j==col-1)printf("\n");
	  }
  return 0;
}

3.【问题描述】 

从键盘输入包含扩展符’-‘的字符串，将其扩展为等价的完整字符，例如将a-d扩展为abcd，并输出扩展后的字符串。 
要求：只处理[a-z]、[A-Z]、[0-9]范围内的字符扩展，即只有当扩展符前后的字符同时是小写字母、大写字母或数字时才进行扩展，其它情况不进行扩展，原样输出。例如：a-R、D-e、0-b、4-B等字符串都不进行扩展。 
【输入形式】 
从键盘输入包含扩展符的字符串 
【输出形式】 
输出扩展后的字符串 
【输入样例1】 
ADEa-g-m02 
【输出样例1】 
ADEabcdefghijklm02 
【输入样例2】 
cdeT-bcd 
【输出样例2】 
cdeT-bcd 
【样例说明】 
将样例1的输入ADEa-g-m02扩展为：ADEabcdefghijklm02；样例2的输入cdeT-bcd中，扩展符前的字符为大写字母，扩展符后的字符为小写字母，不在同一范围内，所以不进行扩展。 
【评分标准】 
结果完全正确得15分，共5个测试点，每个测试点3分，提交程序文件expand.c或expand.cpp。

#include<stdio.h>
#include<string.h>
int cmp(char c){
   if(c>='0'&&c<='9')return 1;
   else if(c>='A'&&c<='Z')return 2;
   else if(c>='a'&&c<='z')return 3;
   else return 0;
}
int main(){
    char str[500];
	scanf("%s",str);
	int i,j,len=strlen(str);
	for(i=0;i<len;i++){
		if(cmp(str[i])==1){
			if(str[i+1]=='-'&&cmp(str[i+2])==1&&str[i]<str[i+2])
			{
				for(j=0;j<(int)(str[i+2]-str[i]);j++)printf("%c",str[i]+j);
				i++;
			}
			else printf("%c",str[i]);
		}
		else if(cmp(str[i])==2){
            if(str[i+1]=='-'&&cmp(str[i+2])==2&&str[i]<str[i+2])
			{
				for(j=0;j<(int)(str[i+2]-str[i]);j++)printf("%c",str[i]+j);
				i++;
			}
			else printf("%c",str[i]);
		}
		else if(cmp(str[i])==3){
			if(str[i+1]=='-'&&cmp(str[i+2])==3&&str[i]<str[i+2])
			{
				for(j=0;j<(int)(str[i+2]-str[i]);j++)printf("%c",str[i]+j);
				i++;
			}
			else printf("%c",str[i]);
		}
		else printf("%c",str[i]);
	}
	printf("\n");
	return 0;
}
